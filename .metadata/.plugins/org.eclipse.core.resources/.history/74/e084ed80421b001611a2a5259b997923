package com.ibm.innovationadmin.manager;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Logger;

import javax.annotation.Resource;
import javax.ejb.LocalBean;
import javax.ejb.Stateless;
import javax.sql.DataSource;

import com.ibm.innovationadmin.constants.CommonConstants;
import com.ibm.innovationadmin.model.EventModel;
import com.ibm.innovationadmin.model.ProfileUserModel;

@Stateless
@LocalBean
public class EventManager {

	
	private static final Logger log = Logger.getLogger(EventManager.class.getName()); 
	
	@Resource(lookup = "jdbc/dashDB-mf")
	DataSource ds;

	Connection connection = null;
	PreparedStatement pstmt = null;
	SimpleDateFormat dateTimeFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
	
	public EventManager(){
		
	}
	
	//Create
	public String createNewEvent(String eveName, String eveDescription, String eveLocation, Date eveStartDate, Date eveEndDate, String evePicturePath, String eveStatus, String eveCancelRemark){
		String sql = "insert into event (eve_name, eve_description, eve_location, eve_start_date, eve_end_date, eve_picture_path, eve_status, eve_create_date, eve_update_date, eve_cancel_remark, eve_register_user) values(?,?,?,?,?,?,?,?,?,?,0)";
		Date currentDateTime = new Date();
		try{
			connection = ds.getConnection();
			pstmt = connection.prepareStatement(sql);
			
			pstmt.setString(1, eveName);
			pstmt.setString(2, eveDescription);
			pstmt.setString(3, eveLocation);
			pstmt.setString(4, dateTimeFormat.format(eveStartDate));
			pstmt.setString(5, dateTimeFormat.format(eveEndDate));
			pstmt.setString(6, evePicturePath);
			pstmt.setString(7, eveStatus);
			pstmt.setString(8, dateTimeFormat.format(currentDateTime));
			pstmt.setString(9, dateTimeFormat.format(currentDateTime));
			pstmt.setString(10, eveCancelRemark);
			
			int result = pstmt.executeUpdate();
			connection.close();
			
			if(result > 0){
				return CommonConstants.RETURN_SUCCESS;
			}
			
		}catch(SQLException e1){
			log.info("SQL ERROR : "+e1.getMessage());
		}catch(Exception e2){
			log.info("ERROR : "+e2.getMessage());
		}
		return CommonConstants.RETURN_FAIL;
		
	}
	
	//Update Information
	public String updateEvent(Integer eveId, String eveName, String eveDescription, String eveLocation, Date eveStartDate, Date eveEndDate, String evePicturePath, String eveStatus, String eveCancelRemark){
		String sql = "update event set eve_name=?, eve_description=?, eve_location=?, eve_start_date=?, eve_end_date=?, eve_picture_path=?, eve_status=?, eve_update_date=?, eve_cancel_remark =? where eve_id=?";
		Date currentDateTime = new Date();
		try{
			connection = ds.getConnection();
			pstmt = connection.prepareStatement(sql);

			pstmt.setString(1, eveName);
			pstmt.setString(2, eveDescription);
			pstmt.setString(3, eveLocation);
			pstmt.setString(4, dateTimeFormat.format(eveStartDate));
			pstmt.setString(5, dateTimeFormat.format(eveEndDate));
			pstmt.setString(6, evePicturePath);
			pstmt.setString(7, eveStatus);
			pstmt.setString(8, dateTimeFormat.format(currentDateTime));
			pstmt.setString(9, eveCancelRemark);
			pstmt.setInt(10, eveId.intValue());
			
			int result = pstmt.executeUpdate();
			connection.close();
			
			if(result > 0){
				return CommonConstants.RETURN_SUCCESS;
			}
			
		}catch(SQLException e1){
			log.info("SQL ERROR : "+e1.getMessage());
		}catch(Exception e2){
			log.info("ERROR : "+e2.getMessage());
		}
		
		return CommonConstants.RETURN_FAIL;
		
	}
	
	public String updateStatus(Integer eveId, String eveStatus){
		String sql = "update event set eve_status=?, eve_update_date=? where eve_id=?";
		Date currentDateTime = new Date();
		try{
			connection = ds.getConnection();
			pstmt = connection.prepareStatement(sql);
			
			pstmt.setString(1, eveStatus);
			pstmt.setString(2, dateTimeFormat.format(currentDateTime));
			pstmt.setInt(3, eveId.intValue());
			
			int result = pstmt.executeUpdate();
			connection.close();
			
			if(result > 0){
				return CommonConstants.RETURN_SUCCESS;
			}
			
			
		}catch(SQLException e1){
			log.info("SQL ERROR : "+e1.getMessage());
		}catch(Exception e2){
			log.info("ERROR : "+e2.getMessage());
		}
		
		return CommonConstants.RETURN_FAIL;
		
	}
	
	

	
	
	//Search by crietria (eventName, eventStartDate, eventStatus)
	public List<EventModel> getEventList(String eveName, Date eveStartDate, String eveStatusIgnore){
		List<EventModel> resultList = null;
		StringBuffer sqlBuffer = new StringBuffer();
		sqlBuffer.append("select * from event where eve_id <> 0 ");
		if(eveName != null && !eveName.equals("")){
			sqlBuffer.append("and eve_name like ? ");
		}
		
		if(eveStartDate != null){
			sqlBuffer.append("and eve_start_date like ? ");
		}
		
		if(eveStatusIgnore != null && !eveStatusIgnore.equals("")){
			sqlBuffer.append("and eve_status <> ? ");
		}
		
		sqlBuffer.append("order by eve_name, eve_start_date ");
		log.info(sqlBuffer+"");
		try{
			connection = ds.getConnection();
			pstmt = connection.prepareStatement(sqlBuffer.toString());
			int runningParam = 1;
			if(eveName != null && !eveName.equals("")){
				pstmt.setString(runningParam, "%"+eveName+"%");
				runningParam += 1;
			}
			if(eveStartDate != null){
				pstmt.setString(runningParam, "%"+dateFormat.format(eveStartDate));
				runningParam += 1;
			}
			
			if(eveStatusIgnore != null && !eveStatusIgnore.equals("")){
				pstmt.setString(runningParam, eveStatusIgnore);
			}
			
			ResultSet results = pstmt.executeQuery();
			EventModel event = null;
			resultList = new ArrayList();
			while(results.next()){
				log.info("----------------");
				log.info("EVE_START_DATE : "+results.getString("eve_start_date"));
				log.info("EVE_END_DATE : "+results.getString("eve_end_date"));
				log.info("----------------");
				event = new EventModel();
				event.setEveId(results.getInt("eve_id"));
				event.setEveName(results.getString("eve_name"));
				event.setEveDescription(results.getString("eve_description"));
				event.setEveLocation(results.getString("eve_location"));
				event.setEveStartDate(dateTimeFormat.parse(results.getString("eve_start_date")));
				event.setEveEndDate(dateTimeFormat.parse(results.getString("eve_end_date")));
				event.setEvePicturePath(results.getString("eve_picture_path"));
				event.setEveStatus(results.getString("eve_status"));
				event.setEveCreateDate(dateTimeFormat.parse(results.getString("eve_create_date")));
				event.setEveUpdateDate(dateTimeFormat.parse(results.getString("eve_update_date")));
				event.setEveCancelRemark(results.getString("eve_cancel_remark"));
				event.setEveRegisterUser(results.getInt("eve_register_user"));
				resultList.add(event);
			}
			connection.close();
			return resultList;
			
		}catch(SQLException e1){
			log.info("SQL ERROR : "+e1.getMessage());
		}catch(Exception e2){
			log.info("ERROR : "+e2.getMessage());
		}
		
		return resultList;
	}

	
	
	//Search by crietria (eventName, eventStartDate, eventStatus)
	public List<EventModel> getEventList(String eveName, Integer month, Integer year, Boolean isNotArchive){
		List<EventModel> resultList = null;
		StringBuffer sqlBuffer = new StringBuffer();
		sqlBuffer.append("select * from event where eve_id <> 0 ");
		if(eveName != null && !eveName.equals("")){
			sqlBuffer.append("and eve_name like ? ");
		}
		
		if(month != null && year != null){
			sqlBuffer.append("and MONTH(eve_start_date) = ? AND YEAR(eve_start_date) = ? ");
		}
		
		if(isNotArchive){
			sqlBuffer.append("and eve_status != 'archive' ");
		}
		
		sqlBuffer.append("order by eve_name, eve_start_date ");
		log.info(sqlBuffer+"");
		try{
			connection = ds.getConnection();
			pstmt = connection.prepareStatement(sqlBuffer.toString());
			int runningParam = 1;
			if(eveName != null && !eveName.equals("")){
				pstmt.setString(runningParam, "%"+eveName+"%");
				runningParam += 1;
			}
			if(month != null && year != null){
				pstmt.setInt(runningParam, month.intValue());
				runningParam += 1;
				pstmt.setInt(runningParam, year.intValue());
				runningParam += 1;
			}
			
			ResultSet results = pstmt.executeQuery();
			EventModel event = null;
			resultList = new ArrayList();
			while(results.next()){
				event = new EventModel();
				event.setEveId(results.getInt("eve_id"));
				event.setEveName(results.getString("eve_name"));
				event.setEveDescription(results.getString("eve_description"));
				event.setEveLocation(results.getString("eve_location"));
				event.setEveStartDate(dateTimeFormat.parse(results.getString("eve_start_date")));
				event.setEveEndDate(dateTimeFormat.parse(results.getString("eve_end_date")));
				event.setEvePicturePath(results.getString("eve_picture_path"));
				event.setEveStatus(results.getString("eve_status"));
				event.setEveCreateDate(dateTimeFormat.parse(results.getString("eve_create_date")));
				event.setEveUpdateDate(dateTimeFormat.parse(results.getString("eve_update_date")));
				event.setEveCancelRemark(results.getString("eve_cancel_remark"));
				event.setEveRegisterUser(results.getInt("eve_register_user"));
				resultList.add(event);
			}
			connection.close();
			return resultList;
			
		}catch(SQLException e1){
			log.info("SQL ERROR : "+e1.getMessage());
		}catch(Exception e2){
			log.info("ERROR : "+e2.getMessage());
		}
		
		return resultList;
	}
	
	public EventModel getEventById(Integer eveId){
		String sql = "select * from event where eve_id = ? ";
		EventModel event = null;
		try{
			connection = ds.getConnection();
			pstmt = connection.prepareStatement(sql);
			pstmt.setInt(1, eveId.intValue());
			
			ResultSet results = pstmt.executeQuery();
			while(results.next()){
				event = new EventModel();
				event.setEveId(results.getInt("eve_id"));
				event.setEveName(results.getString("eve_name"));
				event.setEveDescription(results.getString("eve_description"));
				event.setEveLocation(results.getString("eve_location"));
				event.setEveStartDate(dateTimeFormat.parse(results.getString("eve_start_date")));
				event.setEveEndDate(dateTimeFormat.parse(results.getString("eve_end_date")));
				event.setEvePicturePath(results.getString("eve_picture_path"));
				event.setEveStatus(results.getString("eve_status"));
				event.setEveCreateDate(dateTimeFormat.parse(results.getString("eve_create_date")));
				event.setEveUpdateDate(dateTimeFormat.parse(results.getString("eve_update_date")));
				event.setEveCancelRemark(results.getString("eve_cancel_remark"));
				event.setEveRegisterUser(results.getInt("eve_register_user"));
			}
			
			connection.close();
			return event;
			
		}catch(SQLException e1){
			log.info("SQL ERROR : "+e1.getMessage());
		}catch(Exception e2){
			log.info("ERROR : "+e2.getMessage());
		}
		return event;
		
	}
	
	public List<ProfileUserModel> getRegisterUser(Integer eveId){
		
		StringBuffer sqlBuffer = new StringBuffer();
		sqlBuffer.append("SELECT p.pro_title, p.pro_fullname, p.pro_company_name, p.pro_email, p.pro_contact_no, r.ree_lucky_no, r.ree_got_prize_flag FROM event e ");
		sqlBuffer.append("INNER JOIN register_event r ON e.eve_id = r.ree_eve_id "); 
		sqlBuffer.append("AND r.ree_eve_id = ? INNER JOIN profile_user p ON r.ree_pro_id = p.pro_id");
		
		List<ProfileUserModel> resultList = null;
		try{
			connection = ds.getConnection();
			pstmt = connection.prepareStatement(sqlBuffer.toString());
			pstmt.setInt(1, eveId.intValue());
			
			ResultSet results = pstmt.executeQuery();
			ProfileUserModel user = null;
			resultList = new ArrayList();
			while(results.next()){
				user = new ProfileUserModel();
				user.setProTitle(results.getString("pro_title"));
				user.setProFullName(results.getString("pro_fullname"));
				user.setProCompanyName(results.getString("pro_company_name"));
				user.setProContactNo(results.getString("pro_contact_no"));
				user.setProEmail(results.getString("pro_email"));
				user.setReeLuckyNo(results.getInt("ree_lucky_no"));
				user.setReeGotPrize(results.getString("ree_got_prize_flag"));
				resultList.add(user);
			}
		
		connection.close();
		return resultList;
		}catch(SQLException e1){
			log.info("SQL ERROR : "+e1.getMessage());
		}catch(Exception e2){
			log.info("ERROR : "+e2.getMessage());
		}
		return resultList;
	}
	
	public String deleteEvent(Integer eveId){
		String sql = "delete from event where eve_id=?";
		try{
			connection = ds.getConnection();
			pstmt = connection.prepareStatement(sql);

			pstmt.setInt(1, eveId.intValue());
			
			int result = pstmt.executeUpdate();
			connection.close();
			
			if(result > 0){
				return CommonConstants.RETURN_SUCCESS;
			}
			
			
		}catch(SQLException e1){
			log.info("SQL ERROR : "+e1.getMessage());
		}catch(Exception e2){
			log.info("ERROR : "+e2.getMessage());
		}
		
		return CommonConstants.RETURN_FAIL;
		
	}
	
	public boolean checkCloseRule(int eventId){
		boolean returnresult = false;
		EventModel event = getEventById(eventId);
		Calendar now = Calendar.getInstance();
		now.add(Calendar.HOUR, 7);
		Calendar endDate = Calendar.getInstance();
		endDate.setTime(event.getEveEndDate());
		
		if(now.after(endDate)){
			returnresult = true;
		}
		
		return returnresult;
	}
	
	public boolean checkArchiveRule(int eventId){
		boolean returnresult = false;
		EventModel event = getEventById(eventId);
		
		if(event.getEveStatus().equals("closed")){
			returnresult = true;
		}
		return returnresult;
	}
	
	public Date checkYear(Date date){	
		Calendar cal = Calendar.getInstance();
		cal.setTime(date);
		
		if(cal.get(Calendar.YEAR) > 2500){
			cal.add(Calendar.YEAR, -543); 
		}
		return cal.getTime();
	}
	
}
